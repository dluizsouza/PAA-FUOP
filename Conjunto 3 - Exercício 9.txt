def prim(G):
    vertice_inicial = next(iter(G))

    VT = {vertice_inicial}

    ET = []

    for i in range(len(G) - 1):# Itera até que todos os vértices estejam incluídos na MST (n-1 iterações para n vértices).
        aresta_minima = 0 # Inicializa a variável para armazenar a aresta de menor peso encontrada.
        for v in VT: # Itera sobre cada vértice no conjunto VT.
            for u, distancia in G[v].items():# Itera sobre os vizinhos do vértice v e suas respectivas distâncias.
                if u not in VT:# Verifica se o vizinho u não está no conjunto VT.
                    if aresta_minima == 0 or distancia < aresta_minima[2]:# Atualiza a aresta mínima se for a primeira aresta encontrada ou se a distância for menor que a atual aresta mínima.
                        aresta_minima = (v, u, distancia)
        
        if aresta_minima:# Se uma aresta mínima foi encontrada:
            v, u, distancia = aresta_minima
            VT.add(u)
            ET.append((v, u, distancia))
    
    return ET

G1 = {
    'A': {'B': 3, 'E': 6, 'F': 5},
    'B': {'A': 3, 'C': 1, 'F': 4},
    'C': {'B': 1, 'D': 6, 'F': 4},
    'D': {'C': 6, 'E': 8, 'F': 5},
    'E': {'A': 6, 'D': 8, 'F': 2},
    'F': {'A': 5, 'B': 4, 'C': 4, 'D': 5, 'E': 2}
}

G2 = {
    'A': {'B': 2, 'E': 7, 'F': 1},
    'B': {'A': 2, 'C': 3, 'D': 8},
    'C': {'B': 3, 'D': 6, 'F': 2},
    'D': {'B': 8, 'C': 6, 'E': 9, 'F': 3},
    'E': {'A': 7, 'D': 9, 'F': 4},
    'F': {'A': 1, 'C': 2, 'D': 3, 'E': 4}
}

G3 = {
    'A': {'B': 5, 'C': 3, 'D': 7, 'E': 2, 'F': 6},
    'B': {'A': 5, 'C': 1, 'D': 4, 'F': 3},
    'C': {'A': 3, 'B': 1, 'D': 9, 'E': 6, 'F': 2},
    'D': {'A': 7, 'B': 4, 'C': 9, 'E': 5, 'F': 1},
    'E': {'A': 2, 'C': 6, 'D': 5, 'F': 4},
    'F': {'A': 6, 'B': 3, 'C': 2, 'D': 1, 'E': 4}
}
print("Arestas da árvore:", prim(G1))